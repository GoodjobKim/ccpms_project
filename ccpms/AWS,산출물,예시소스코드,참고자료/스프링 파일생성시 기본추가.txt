----------pom.xml----------------
java-version 1.11
spring version 5.0.2


-----------------WEB.XML 한글설정-----------
<filter>
	<filter-name>encodingFilter</filter-name>
	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	<init-param>
		<param-name>encoding</param-name>
		<param-value>UTF-8</param-value>
	</init-param>
	<init-param>
		<param-name>forceEncoding</param-name>
		<param-value>true</param-value>
	</init-param>
</filter>

<filter-mapping>
	<filter-name>encodingFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>


--------------패스워드, 암호화------------------
1) pom.xml파일에 dependency를 추가한다.
	<dependency>
	    <groupId>org.springframework.security</groupId>
	    <artifactId>spring-security-web</artifactId>
	    <version>5.0.8.RELEASE</version>
	</dependency>
	
	<dependency>
	    <groupId>org.springframework.security</groupId>
	    <artifactId>spring-security-config</artifactId>
	    <version>5.0.8.RELEASE</version>
	</dependency>
2) servlet-context.xml에 아래의 빈 선언을 추가한다.
	<beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" /> 
3) 서비스 로직에서 BCryptPasswordEncoder 객체를 생성한다.
	@Autowired
	private BCryptPasswordEncoder bCryptPasswordEncoder;
4) 사용법
	- bCryptPasswordEncoder.encode(암호화하고 싶은 패스워드)   				// encode(평문)메서드를 통하여 패스워드를 암호화한다.
	- bCryptPasswordEncoder.matches(입력받은 패스워드, 암호화된 패스워드) 	// matches(평문,암호문) 메서드를 통하여 입력받은 패스워드와 암호화된 패스워드를 비교한다.
	- 암호화된 패스워드를 복호화하는 메서드는 존재하지 않는다.		


--------------Project Facets ------------------
java 11, dynamic web module 4.0 apach tomcat 9.0 등록



------------Spring과 MySQL 연동 방법--------------
1. pom.xml파일에 의존성 추가
spring-jdbc , 컨넥션 풀 라이브러리 , MYSQL 드라이버 , mybatis의존성을 추가한다.
	
		<!-- 컨넥션 풀 라이브러리 -->
		<dependency>
		    <groupId>commons-dbcp</groupId>
		    <artifactId>commons-dbcp</artifactId>
		    <version>1.4</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<dependency>								<!-- DB 컨넥션을 위한 라이브러리 -->
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>								<!-- MYSQL을 사용하기 위한 라이브러리 -->
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		    <version>8.0.15</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>								<!-- Mybatis를 사용하기 위한 라이브러리1 -->
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.5.3</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency>								<!-- Mybatis를 사용하기 위한 라이브러리2 -->
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>2.0.3</version>
		</dependency>
		
2. root-context.xml파일을 수정한다.

		2-1) namespace추가 		xmlns:context="http://www.springframework.org/schema/context"
		2-2) schemaLocation추가 http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
			(주의 schemaLocation은 ""가 하나의 문자열)
		
		<beans xmlns="http://www.springframework.org/schema/beans"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xmlns:context="http://www.springframework.org/schema/context"																				
				xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
									http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">	
	
			<context:property-placeholder location="classpath:properties/jdbc.properties" />
			
			<bean id="dataSource" class="org.apache.ibatis.datasource.pooled.PooledDataSource">
				<property name="driver"   value="${jdbc.driverClassName}" />
				<property name="url"      value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</bean>
			
			<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" >
			  <property name="dataSource"      ref="dataSource" />
			  <property name="configLocation"  value="classpath:mybatis-config.xml"  />
			  <property name="mapperLocations" value="classpath:mappers/*.xml" />
			</bean >
			
			<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache"> 
				<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" /> 
			</bean> 	
		</beans> 
	
3. DB연동 관련 파일들을 생성한다. (주의 : 반드시 root-context.xml파일에 명시된대로 파일들이 위치에 있어야 한다.)
	
	3-1) src/main/resources 폴더에 properties 폴더를 생성하여 그 안에 jdbc.properties파일을 생성한뒤 아래의 내용을 작성한다.
		# Local DB
		jdbc.driverClassName=com.mysql.jdbc.Driver
		jdbc.url=jdbc:mysql://localhost:3306/DB이름?serverTimezone=UTC
		jdbc.username=root
		jdbc.password=1234

	3-2) src/main/resources 폴더에 mybatis-config.xml파일을 생성한뒤 아래의 내용을 작성한다. (주의 : 설정이 없어도 configuration 태그는 있어야 한다.)
		<?xml version="1.0" encoding="UTF-8"?>
		
		<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">	
		
		<configuration>
			
			<settings>
				<setting name="mapUnderscoreToCamelCase" value="true"/>
			</settings>
			 
			 <typeAliases>
			 	
			 </typeAliases>
		</configuration>
		
	3-3) src/main/resources 폴더에 mappers폴더를 생성한뒤 xml파일을 생성하여 아래의 내용을 작성한다. (주의 : 쿼리가 없어도 mapper태그와 name스페이스는 지정되어 있어야 한다.)
	
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
	<mapper namespace="사용하고 싶은 이름">
	</mapper>


-------------# AJAX데이터 전송-----------
- pom.xml파일에 의존성 추가
<!-- jackson-core -->
	<dependency>
	<groupId>com.fasterxml.jackson.core</groupId>
	<artifactId>jackson-databind</artifactId>
	<version>2.9.2</version>
</dependency>


----------------# AOP 구현----------------------
1) pom.xml 파일에 AOP 관련 dependency 추가
	<!-- AspectJ -->
	<dependency>
		<groupId>org.aspectj</groupId>
		<artifactId>aspectjrt</artifactId>
		<version>${org.aspectj-version}</version>
	</dependency>	
	
	<dependency>
	   <groupId>org.aspectj</groupId>
	   <artifactId>aspectjweaver</artifactId>
	   <version>1.6.11</version>
	 </dependency>

    <dependency>
	  <groupId>org.springframework</groupId>
	  <artifactId>spring-aop</artifactId>
	  <version>${org.springframework-version}</version>
    </dependency>

2) servlet-context.xml 파일에 aop autoproxy 설정 적용

	xmlns:aop="http://www.springframework.org/schema/aop"							
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd

	<aop:aspectj-autoproxy />

3) Advice 클래스에 @Component 및 @Aspect 어노테이션 지정
	
	@Component
	@Aspect

4) Advice 적용


----------------------스프링 로그파일 설정방법--------------
1) pom.xml에서 log4j의존성 추가 (기본값으로 셋팅되어 있음)
		
) log4j.xml 설정 파일에서 appender 설정
		
<!-- DailyFile Appenders -->
<appender name="dailyFileAppender" class="org.apache.log4j.DailyRollingFileAppender">
	<param name="File" value="파일명" />
	<layout class="org.apache.log4j.PatternLayout">
		<param name="DatePattern"   value="'.'yyyy-MM-dd-HH-mm"/>
		<param name="ConversionPattern"   value="[%d{HH:mm:ss}][%-5p](%F:%L)-%m%n"/>
	</layout>
</appender>
		
3) log4j.xml 설정 파일에서 appender 추가
<!-- Root Logger -->
<root>
	<priority value="warn" />
	<appender-ref ref="console" />
	<appender-ref ref="dailyFileAppender" />  
</root>


----------------------타일즈 사용방법---------------------
[ 구현 예시 ] 
1. pom.xml 에 tiles 관련 dependency 추가
<dependency>
	<groupId>org.apache.tiles</groupId>
	<artifactId>tiles-core</artifactId>
	<version>3.0.7</version>
</dependency>
<dependency>
	<groupId>org.apache.tiles</groupId>
	<artifactId>tiles-jsp</artifactId>
	<version>3.0.7</version>
</dependency>
<dependency>
	<groupId>org.apache.tiles</groupId>
	<artifactId>tiles-servlet</artifactId>
	<version>3.0.7</version>
</dependency>

2. servlet-context.xml 파일에 Tiles View Resolver 추가
<beans:bean id="urlBasedViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
	<beans:property name="order" value="1" />		
</beans:bean>

<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
	<beans:property name="definitions" value="classpath:tiles/*.xml" />	
</beans:bean>
			
3. tiles설정 xml 지시서 작성
1) 선언문 작성
<!DOCTYPE tiles-definitions PUBLIC "-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN" "http://tiles.apache.org/dtds/tiles-config_3_0.dtd">
		
2) definition 정의
<tiles-definitions>
	<definition name="템플릿속성명" 	   template="화면레이아웃.jsp">		
		<put-attribute name="속성명" value="화면상단.jsp"/>	
		<put-attribute name="속성명" value="화면하단.jsp"/>	
		<put-attribute name="속성명" value="화면좌측.jsp"/> 	
	</definition>
			 	
	<definition name="컨트롤러의 return"  extends="템플릿속성명">	
		<put-attribute name="속성명" value="화면본문.jsp"/>	
		<put-attribute name="속성명" value="화면제목"/>	
	</definition>
			 	
	<definition name="컨트롤러의 return"  extends="템플릿속성명">	
		<put-attribute name="속성명" value="화면본문.jsp"/>	
		<put-attribute name="속성명" value="화면제목"/>	
	</definition>
			 	
	<definition name="컨트롤러의 return"  extends="템플릿속성명">	
		<put-attribute name="속성명" value="화면본문.jsp"/>	
		<put-attribute name="속성명" value="화면제목"/>	
	</definition>
</tiles-definitions>

* (wildcard)로 return의 패턴을 매칭할 수 있으며
첫번째 * 는 {1}
두번째 * 는 {2}
세번째 * 는 {3}과 같은 규칙으로 매칭할수 있다.
<definition name="tilesEx/*" extends="default">												
	<put-attribute name="content" value="/WEB-INF/views/tiles/tilesEx/{1}.jsp"/> 					
	<put-attribute name="title"   value="{1}"/> 											
</definition>

4. 화면 레이아웃 작성
1) 태그라이브러리 선언한다.
<%@ taglib prefix="tiles" uri="http://tiles.apache.org/tags-tiles" %> 
		
2) insertAttribute를 통하여 jsp파일을 조립한다.
<tiles:insertAttribute name="속성명"/>								 
<tiles:insertAttribute name="속성명"/>								 
<tiles:insertAttribute name="속성명"/>								 
<tiles:insertAttribute name="속성명"/>	


----------------스프링 배치 사용방법---------------------
[ 스프링 배치 구현 방법 ]
1) servlet-contxt.xml파일을 수정한다.
	xmlns:task="http://www.springframework.org/schema/task"			<< namespace추가
	xmlns:util="http://www.springframework.org/schema/util"			<< namespace추가
		  
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd  << xsi:schemaLocation 추가
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd  << xsi:schemaLocation 추가
	
	<task:annotation-driven />										<< 태그 추가
	  
2) Service로직에서 @Scheduled(cron="초 분 시 일 월 요일 (연도)") 선언 후 배치를 사용한다.


------------------파일 업로드 사용방법----------------
1) pom.xml파일에 파일 업로드 및 썸네일 의존성을 추가한다.
<!-- 파일업로드 -->
<dependency>
	<groupId>commons-fileupload</groupId>
	<artifactId>commons-fileupload</artifactId>
	<version>1.3.1</version>
</dependency>
   
<!-- 썸네일 -->
<dependency>
	<groupId>net.coobird</groupId> 
	<artifactId>thumbnailator</artifactId> 
	<version>0.4.8</version> 
</dependency> 

2) servlet-context.xml파일에 아래의 설정을 추가한다.
<beans:bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<beans:property name="maxUploadSize"   value="52428800" />
	<beans:property name="maxInMemorySize" value="52428800" />
	<beans:property name="defaultEncoding" value="utf-8" />
</beans:bean>

3) 컨트롤러의 메서드 파라메타에 MultipartHttpServletRequest를 선언하여 파일 업 다운로드 관련 메서드를 사용한다.


---------------쿼리로깅 사용방법-----------------
[ 쿼리 로깅 구현 방법 ]
1. pom.xml파일에 의존성을 추가한다.

<!-- https://mvnrepository.com/artifact/org.bgee.log4jdbc-log4j2/log4jdbc-log4j2-jdbc4 -->
<dependency>
	<groupId>org.bgee.log4jdbc-log4j2</groupId>
	<artifactId>log4jdbc-log4j2-jdbc4</artifactId>
	<version>1.16</version>
</dependency>
	
2. jdbc.properties파일 수정한다.
(수정내용)
2-1)com.mysql.jdbc.Driver   >>>  net.sf.log4jdbc.sql.jdbcapi.DriverSpy (drierClassName수정)
2-1)jdbc:mysql://           >>>  jdbc:log4jdbc:mysql://				(url수정)

	[ 기본값 설정 ]
	jdbc.driverClassName=com.mysql.jdbc.Driver
	jdbc.url=jdbc:mysql://localhost:3306/SPRING_UTILITY?serverTimezone=UTC
	jdbc.username=root
	jdbc.password=1234			
	
	[ 수정된 설정 ]
	jdbc.driverClassName=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
	jdbc.url=jdbc:log4jdbc:mysql://localhost:3306/SPRING_UTILITY?serverTimezone=UTC
	jdbc.username=root
	jdbc.password=1234		

3. log4jdbc.log4j2.properties파일을 src/main/resources위치에 생성후 아래의 설정을 추가한다.
log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator

4. log4j.xml파일에 아래의 설정을 추가하여 시스템의 상황에 맞도록 로깅을 구현한다.
<logger name="jdbc.sqltiming" additivity="false">
	<level value="info" />
	<appender-ref ref="console"/> 
</logger>
<logger name="jdbc.sqlonly" additivity="false"> 	
	<level value="debug"/> 
	<appender-ref ref="console"/> 
</logger>
<logger name="jdbc.audit" additivity="false"> 
	<level value="debug"/>  
	<appender-ref ref="console"/> 
</logger> 
<logger name="jdbc.resultset" additivity="false">
	<level value="debug" />
	<appender-ref ref="console"/> 
</logger>
<logger name="jdbc.resultsettable" additivity="false"> 
	<level value="debug"/>  
	<appender-ref ref="console"/> 
</logger> 


---------------- [ 스프링 트랜잭션 구현 방법 ]-----------------------
1. AOP 기능을 적용한다. pom.xml파일에 aop의존성 추가, servlet-context.xml 파일에 aop autoproxy 설정 적용
	  
2. root-context.xml파일을 수정한다.

xmlns:tx="http://www.springframework.org/schema/tx" 												  	<< namespace추가
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd  	<< xsi:schemaLocation에 추가
	  	
<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  << 태그 추가
	<property name="dataSource" ref="dataSource" />
</bean>
		
<tx:annotation-driven />																				<< 태그 추가															

3. Service 로직에서 메서드 위에 @Transactional어노테이션 추가 후 트랜잭션을 구현한다.